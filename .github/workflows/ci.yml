name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  release:
    types: [published]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.11']
        django-version: ['4.2', '5.0', '5.1']
        exclude:
          - python-version: '3.9'
            django-version: '5.0'
          - python-version: '3.9'
            django-version: '5.1'

    services:
      postgres:
        image: pgvector/pgvector:pg14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: deepface_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v3

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libgl1 libglib2.0-0 libpq-dev

    - name: Install dependencies
      run: |
        uv sync --extra dev
        uv pip install Django~=${{ matrix.django-version }}.0

    - name: Create pgvector extension
      run: |
        PGPASSWORD=postgres psql -h localhost -U postgres -d deepface_test -c 'CREATE EXTENSION IF NOT EXISTS vector;'

    - name: Run tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/deepface_test
      run: |
        uv run pytest

    - name: Upload coverage
      uses: codecov/codecov-action@v4
      if: matrix.python-version == '3.11' && matrix.django-version == '5.0'
      with:
        token: ${{ secrets.CODECOV_TOKEN }}

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    - name: Install uv
      uses: astral-sh/setup-uv@v3
    - name: Install dependencies
      run: uv sync --extra dev
    - name: Run linting
      run: |
        uv run ruff check . --ignore=E501,RUF012
        uv run ruff format --check .

  build:
    needs: [test, lint]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    - name: Install uv
      uses: astral-sh/setup-uv@v3
    - name: Build package
      run: uv build
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  publish:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    permissions:
      id-token: write
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    - name: Install uv
      uses: astral-sh/setup-uv@v3
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/
    - name: Publish to PyPI
      run: uv publish
